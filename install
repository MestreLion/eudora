#!/bin/bash
#
# install - an installer for Eudora
#
#    Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program. If not see <http://www.gnu.org/licenses/gpl.html>

#TODO: Registry tweaks: default mail (under wine)

#FIXME: Edit eudora.sh post-install, hardcoding correct prefix, exec and data
# paths, reading from registry

# ---------------------------------------------------------------
# User-modifiable stuff... most can be changed via command-line options

# App name in menus, Launchers, etc (inside .desktop file)
name="Eudora Mail"

# executable (also affects dir, icon and .desktop file names)
exec=eudora

# install prefix
prefix=${XDG_DATA_HOME:-"$HOME"/.local}

# download URLs
urlmanual=http://www.eudora.com/download/
urlauto=http://www.eudora.com/download/eudora/windows/7.1/Eudora_7.1.0.9.exe
urlpdf=http://www.eudora.com/download/eudora/windows/7.1/Eudora_71_User_Manual.pdf

# drive letters to add
drives=()

# Registry tweaks
dpi=96      # Font DPI ("size")
intldate=0  # "International" Date/Time format: leading zeros, 24h, dd/mm/YYYY

# leave these ones alone
logout=1  # install changes this to 0 if exec dir is already in PATH
verbose=1
uninstall=0

# ---------------------------------------------------------------
# Boring UI stuff...

myname="${0##*/}"
mydir=$(dirname "$(readlink -f "$0")")
greenC=$(tput setaf 2; tput bold)
redC=$(tput setaf 1; tput bold)
endC=$(tput sgr0)

fatal()   { [[ "$1" ]] && echo "${redC}$myname: error: $1${endC}" >&2; exit ${2:-1}; }
argerr()  { printf "%s: %s\n" "$myname" "${1:-error}" >&2 ; usage 1 ; }
invalid() { argerr "invalid option: $1" ; }
missing() { argerr "missing ${1:+$1 }operand." ; }
integer() { [[ "$1" != *[!0-9]* ]] || argerr "'$1'${2:+ in $2} is not an integer."; }
message() { ((verbose)) && echo "${greenC}*${endC} ${1}" ; }
quit()    { ((verbose)) && echo "Goodbye!" ; exit; }

usage() {
	cat <<- USAGE
	Usage: $myname [options] [[--installer] FILE]
	USAGE
	if [[ "$1" ]] ; then
		cat >&2 <<- USAGE
		Try '$myname --help' for more information.
		USAGE
		exit 1
	fi
	cat <<USAGE

An installer for ${name} in Debian/Ubuntu/Mint

Includes uninstall script. Tested with v7.1.0.9

Options:
-h|--help  - show this page.
-q|--quiet - supress informative messages.

--exec=NAME
	executable name, also used as a prefix for for naming the
	install directory, icon and .desktop files. Default "$exec"

--prefix=DIR
	parent of the install directory. Default is
	"$prefix"

--name=NAME
	friendly application name, for menu entries. Default "$name"

--drive=X:PATH
	adds a new drive in wine, mapping the directory PATH to the wine drive
	letter X:. Can be used multiple times. Allowed X ranges from D to X
	(A,B,C,Z are somewhat reserved in Wine). Letters like D (and perhaps E)
	will overwrite pre-configured optical drives (CD/DVD), so re-add them
	assigning a different letter if you want. Relative PATHs are allowed,
	and will be relative to PREFIX/dosdevices. Examples:
	--drive=D:/mnt/data --drive=E:/media/cdrom --drive=F:/dev/sr0
	--drive=G:../../../../../Desktop/mydir

--installer FILE
	the .exe install file downloaded from ${name}'s website.
	If none is provided, a menu will show currently downloaded files.

--uninstall
	Uninstall ${name}. Combine with --exec and --prefix to
	uninstall from a custom install

Copyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
USAGE
	exit 0
}

for arg in "$@"; do case "$arg" in -h|--help) usage ;; esac; done
while (( $# )); do
	case "$1" in
	-h|--help     ) usage                ;;
	-q|--quiet    ) verbose=0            ;;
	--intl-date   ) intldate=1           ;;
	--name=*      ) name="${1#*=}"       ;;
	--exec=*      ) exec="${1#*=}"       ;;
	--prefix=*    ) prefix="${1#*=}"     ;;
	--installer=* ) tarball="${1#*=}"    ;;
	--dpi=*       ) dpi="${1#*=}"        ;;
	--drive=*     ) drives+=("${1#*=}")  ;;
	--name        ) shift; name="$1"     ;;
	--exec        ) shift; exec="$1"     ;;
	--prefix      ) shift; prefix="$1"   ;;
	--installer   ) shift; tarball="$1"  ;;
	--dpi         ) shift; dpi="$1"      ;;
	--drive       ) shift; drives+=("$1");;
	--uninstall   ) uninstall=1          ;;
	--            ) shift; tarball="$1"
	                break                ;;
	-*            ) invalid "$1"; break  ;;
	*             ) tarball="$1"         ;;
	esac
	shift
done

[[ "$name" ]] || missing "name"
[[ "$exec" ]] || missing "exec"
[[ "$tarball" && ! -f "$tarball" ]] && invalid "installer '$tarball' was not found"
integer "$dpi" "--dpi"

for drive in "${drives[@]}"; do
	IFS=: read drive_letter drive_path <<< "$drive"
	[[ "${drive_letter,,}" =~ ^[d-x]$ && "$drive_path" ]] ||
		invalid "'$drive' is not a valid drive syntax. Use 'X:/path/to/x', drive from D to X"
done

((verbose)) && v=v

dir=${prefix}/share/wineprefixes/${exec}
config=.config/${exec}
deskdir=${dir}/linux
deskfile=${deskdir}/${exec}.desktop
execfile=${deskdir}/${exec}
execdir=${prefix}/bin

# Uninstall  ---------------------------------------------

((uninstall)) && {

	msg="Are you sure you want to remove ${name} (${exec})?"
	read -r -p "$msg (yes,NO): " confirm
	case "$confirm" in
	[Yy]*)
		message "removing desktop files"
		xdg-desktop-menu uninstall --novendor "$exec"{,-manual}.desktop

		message "removing icons"
		shopt -s nullglob
		for icon in "$deskdir"/*.{png,svg,xpm} ; do
			size=${icon##*-}
			size=${size%%.*}
			xdg-icon-resource uninstall --noupdate \
				--size "$size" "$exec" 2>/dev/null
		done
		shopt -u nullglob
		xdg-icon-resource forceupdate

		message "removing executable"
		rm -rf "$execdir/$exec"

		message "removing install dir"
		rm -rf "$dir"

		[[ -d "$HOME/$config" ]] && {
			msg="Remove personal settings in $HOME/$config ?"
			read -r -p "$msg (yes,NO): " confirm
			case "$confirm" in
			[Yy]*)
				message "removing $HOME/$config"
				rm -rf "$HOME/$config"
			;;
			esac
		}

		message "Successfully uninstalled $name"
	;;
	esac

	exit
}

# ---------------------------------------------------------------
# Helper functions

icon_size()
{
	local icon=$1
	local title=${icon%.*}
	local ext=${icon#"$title"}
	local size=${title##*-}

	# size in filename
	if   [[ "$size" =~ ^[0-9]+$ ]]; then
		echo "$size"

	# auto-detect by imagemagick
	elif type identify >/dev/null 2>&1; then
		identify -format '%w' "$icon"

	# parsed from xpm
	elif [[ "${ext,,}" = .xpm ]]; then
		awk 'NR==3{print $2}' "$icon"

	else
		return 1
	fi
}

# ---------------------------------------------------------------
# Installer begins here (but still boring)

((verbose)) && printf "\n${name^^} INSTALLER\n\n"

if [[ -z "$tarball" ]]; then

	cd "$mydir"
	shopt -s nullglob
	options=( *.exe "Auto-download" "Manual download at $urlmanual" )
	shopt -u nullglob

	echo "Available installers:"
	PS3="Choose an install (0 to quit): "

	select tarball in "${options[@]}"; do
		if   ((REPLY==${#options[@]}-1)); then
			# Auto download
			break
		elif ((REPLY==${#options[@]})); then
			# Manual download
			message "Opening your web browser..." ;
			message "Download the .exe installer, save it in"
			message "$mydir"
			message "... and run me again"
			xdg-open "$urlmanual"
			quit
		elif ((REPLY==0)); then
			# Exit
			quit
		elif [[ -f "$tarball" ]]; then
			# Selected installer
			tarball="${mydir}/${tarball}"
			break
		fi
	done
	echo ""
	cd - >/dev/null
fi

if ((verbose)); then
	echo "Install details:"
	echo "App name     = $name"
	echo "Executable   = $exec"
	echo "Install dir  = $dir"
	echo "Installer    = ${tarball:-$urlauto}"
	echo "Wine Drives  = ${drives[@]}"
	echo "To change these options, see $myname --help"
	read -r -p "Confirm? (YES,no): " confirm
	case "$confirm" in
	[Nn]*) quit
	esac
	echo ""
fi

if [[ -e "$dir" ]]; then
	msg="Install directory $dir already exists. Delete it before proceding?"
	read -r -p "$msg (yes,NO): " confirm
	case "$confirm" in
	[Yy]*) message "removing $dir" ;
	       rm -rf "$dir" || fatal "could not remove $dir" ;;
	    *) quit
	esac
fi

# ---------------------------------------------
# Now the fun begins

exec 3> /dev/null # to avoid harcoding /dev/null everywhere. For wine stderr.

# wine bottle
message "creating wine prefix $dir"
mkdir -p${v} "$(dirname "$dir")"
env WINEARCH=win32 WINEPREFIX="$dir" wine wineboot 2>&3 ||
	fatal "could not create wine prefix"
until [[ -f "$dir/system.reg" ]] ; do : ; done ; sleep 1


# wine drives
for drive in "${drives[@]}"; do
	message "configuring wine drive ${drive_letter^^}: to $drive_path"
	IFS=: read drive_letter drive_path <<< "$drive"
	drive_block=$([[ -b "$drive_path" ]] && echo ":")
	rm -f "$dir/dosdevices/${drive_letter,,}:"*
	ln -s "$drive_path" "$dir/dosdevices/${drive_letter,,}:$drive_block"
done


# installer
mkdir -p${v} "$deskdir" ||
	fatal "could not create integration dir $deskdir"

if [[ "$tarball" ]]; then
	message "copying installer to $deskdir"
	cp -f${v} "$tarball" "$deskdir"
	tarball="$deskdir/${tarball##*/}"
else
	message "downloading installer to $deskdir"
	wget --directory-prefix="$deskdir" "$urlauto"
	tarball="$deskdir/${urlauto##*/}"
fi

message "executing installer"
env WINEPREFIX="$dir" wine "$tarball" 2>&3 ||
	fatal "could not execute installer"

# Check if completed or canceled by user
[[ "$(find "$dir/drive_c" -name 'Eudora.exe')" ]] ||
{ message "please wait..."; sleep 5;
  grep -q 'Qualcomm\\\\Eudora' "$dir/system.reg"; } ||
{ rm -rf "$dir" ; quit ; }


#wine installer clean-up
message "cleaning wine auto-generated Eudora cruft"
find ~/.local/share/icons -iregex '.*/[A-F0-9]+_eudora.*\.[0-9]+\.png$' -delete
find ~/.local/share/icons -iregex '.*/[A-F0-9]+_qckstart.*\.[0-9]+\.png$' -delete
rm -rf${v} ~/.local/share/applications/wine/Programs/Eudora
rm -rf${v} ~/.local/share/desktop-directories/wine-Programs-Eudora.directory
rm -rf${v} ~/.config/menus/applications-merged/wine-Programs-Eudora-*.menu


# launcher
message "creating launcher $execfile"
cp -f${v} "$mydir/eudora.sh" "$execfile" ||
	fatal "could not create $execfile launcher"

message "symlinking launcher to $execdir/$exec"
mkdir -p${v} "$execdir" &&
rm -f${v} "$execdir/$exec" &&
ln -s "$execfile" "$execdir/$exec" ||
	fatal "could not create symlink $execfile"


# icons
message "installing icons"
shopt -s nullglob
for icon in "$mydir"/icons/*.{[Pp][Nn][Gg],[Ss][Vv][Gg],[Xx][Pp][Mm]} ; do
	size=$(icon_size "$icon") ||
		fatal "could not determine size of $icon. Rename it or install ImageMagick"
	ext=${icon##*.}
	cp -f${v} "$icon" "${deskdir}/${exec}-${size}.${ext,,}"
	xdg-icon-resource install --noupdate --novendor \
		--size "$size" "$icon" "$exec"
done
shopt -u nullglob
xdg-icon-resource forceupdate || fatal "could not install icons"


# desktop file
message "installing desktop file"
cat > "$deskfile" <<-DESKTOP
	[Desktop Entry]
	Version=1.0
	Type=Application
	Name=$name
	Name[pt]=$name
	Name[pt_BR]=$name
	GenericName=Mail Client
	GenericName[pt]=Leitor de Emails
	GenericName[pt_BR]=Leitor de Emails
	Comment=Read and write email with Eudora
	Comment[pt]=Leia e escreva emails com Eudora
	Comment[pt_BR]=Leia e escreva emails com Eudora
	Categories=Application;Network;Email;
	Terminal=false
	StartupNotify=true
	MimeType=x-scheme-handler/mailto;
	StartupWMClass=Eudora.exe
	X-Ayatana-Desktop-Shortcuts=Compose;
	Icon=$exec
	TryExec=wine
	Exec=$exec %u

	[Compose Shortcut Group]
	Name=Compose New Message
	Name[pt]=Criar nova mensagem
	Name[pt_BR]=Criar nova mensagem
	Exec=eudora "mailto:?body=%0A"
	TargetEnvironment=Messaging Menu;Unity;
DESKTOP
xdg-desktop-menu install --novendor "$deskfile" ||
	fatal "could not install desktop file"


# manual
message "downloading and installing manual"
wget --directory-prefix="$deskdir" "$urlpdf"
cat > "${deskdir}/${exec}-manual.desktop" <<-MANUAL
	[Desktop Entry]
	Version=1.0
	Type=Application
	Name=$name User Guide
	Name[pt]=$name - Guia do Usuário
	Name[pt_BR]=$name - Guia do Usuário
	Categories=Application;Network;Email;
	Terminal=false
	Icon=application-pdf
	Exec=xdg-open '${deskdir}/${urlpdf##*/}'
MANUAL
xdg-desktop-menu install  --novendor "${deskdir}/${exec}-manual.desktop"


# install, uninstall, perms and PATH
message "copying install and uninstall scripts to $dir/bin"
cp -f${v} "$mydir/$myname" "$deskdir/install"
awk -v exec="$exec" -v prefix="$prefix" -v name="$name" \
    '/^uninstall=/{sub("=.*","=1")}
     /^exec=/     {sub("=.*","=\"" exec   "\"")}
     /^name=/     {sub("=.*","=\"" name   "\"")}
     /^prefix=/   {sub("=.*","=\"" prefix "\"")}
     1' "$mydir/$myname" > "$deskdir/uninstall"

message "setting permissions"
chmod +x "$execfile" "$deskdir"/{un,}install ||
	fatal "could not set permissions in $deskdir"

ifs=$IFS
IFS=:
for pathdir in $PATH ; do
	[[ "$pathdir" == "$execdir" ]] && { logout=0 ; break ; }
done
IFS=$ifs
if ((logout)); then
	relexecdir=${execdir#$HOME/}
	message "adding ~/${relexecdir} to you \$PATH in ~/.profile"
	cat >> "$HOME/.profile" <<-EOF

	# Included by $name
	# set PATH so it includes user's ~/${relexecdir} if it exists
	if [ -d "\$HOME/$relexecdir" ] ; then
	    PATH="\$HOME/$relexecdir:\$PATH"
	fi
	EOF
fi


# Registry tweaks
regfile="$deskdir/$exec.reg"

if ((dpi != 96)); then
	message "adjusting font size to $dpi dpi"
	dpihex=$(printf '%08x' "$dpi")
	cat >> "$regfile" <<-REGEDIT
	[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Hardware Profiles\Current\Software\Fonts]
	"LogPixels"=dword:$dpihex
	REGEDIT
fi
if ((intldate)); then
	message "adjusting date and time format"
	cat >> "$regfile" <<-REGEDIT
	[HKEY_CURRENT_USER\Control Panel\International]
	"iTime"="1"
	"iTLZero"="1"
	"sShortDate"="dd/MM/yyyy"
	REGEDIT
fi

if [[ -f "$regfile" ]]; then
	env WINEPREFIX="$dir" wine regedit "$regfile" 2>&3
fi


message "Succesfully installed ${name}!"
((logout)) && echo "Log out for changes to apply..."
